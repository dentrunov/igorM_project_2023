version: '3'
services:
  flask:
    # Путь до Dockerfile
    build: ./flaskapp/
    # Имя для создаваемого контейнера
    container_name: igorm_2023
    # Создание переменных окружения в контейнере
    environment:
      # для отладки (при запуске в релиз убрать!)
      - FLASK_ENV=development
      ## Позволяет отслеживать процесс работы приложения в командной строке
      - PYTHONUNBUFFERED=True                   
      ##
    # Перезапускаем сервис в случае падения 
    restart: on-failure
    # Прокладывам путь для файлов. Все файлы, которые хранятся у вас в 
    # директории ./backend, появятся в директории контейнера /backend
    volumes:
      - ./:/myapp
    # Открываем порт в контейнер
    # Порт, который будет смотреть наружу : порт который используется внутри контейнера
    ports:
      - "5000:5000"
    command: python3 main.py
    depends_on:
      - db

  tbot:
    # Путь до Dockerfile
    build: ./tbot/
    # Имя для создаваемого контейнера
    container_name: tbot
    # Создание переменных окружения в контейнере
    environment:
      - PYTHONUNBUFFERED=True                   
    # Перезапускаем сервис в случае падения 
    restart: on-failure
    stop_signal: SIGINT
    volumes:
      - ./:/tbot
    # Открываем порт в контейнер
    # Порт, который будет смотреть наружу : порт который используется внутри контейнера
    # ports:
    #   - "5000:5000"
    command: python3 main.py
    depends_on:
      - db
      
  qr_reader:
    build: ./qr_reader/
    privileged: true
    container_name: qr_reader
    environment:
      - PYTHONUNBUFFERED=True
      - DISPLAY
    devices:
      - "/dev/video0:/dev/video0"
    restart: always
    volumes:
      - /dev:/dev
    
    command: python3 main.py
    depends_on:
      - db

  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=hello_flask
      - POSTGRES_PASSWORD=hello_flask
      - POSTGRES_DB=hello_flask_dev
    ports:
      - "5432:5432"
volumes:
  postgres_data: